import fs from 'fs';
import path from 'path';
import { Client } from '@notionhq/client';
import { markdownToBlocks } from '@tryfabric/martian';
import { glob } from 'glob';

const notion = new Client({ auth: process.env.NOTION_TOKEN });
const databaseId = process.env.NOTION_DATABASE_ID;

console.log('üöÄ Starting Notion sync...');

// Ê£ÄÊü•ÂøÖË¶ÅÁöÑÁéØÂ¢ÉÂèòÈáè
if (!process.env.NOTION_TOKEN) {
    console.error('‚ùå NOTION_TOKEN not found');
    process.exit(1);
}

if (!process.env.NOTION_DATABASE_ID) {
    console.error('‚ùå NOTION_DATABASE_ID not found');
    process.exit(1);
}

console.log(`üîë Using database ID: ${process.env.NOTION_DATABASE_ID}`);
console.log(`üé´ Token length: ${process.env.NOTION_TOKEN ? process.env.NOTION_TOKEN.length : 'undefined'} chars`);

// Êî∂ÈõÜÊñáÊ°£
const files = glob.sync('./docs/**/*.md');
console.log(`üîç Found ${files.length} markdown files`);

// ÁÆÄÂåñÁöÑÊñáÊ°£Â§ÑÁêÜ
for (const filePath of files.slice(0, 2)) {
    // Âè™Â§ÑÁêÜÂâç2‰∏™Êñá‰ª∂ËøõË°åÊµãËØï
    try {
        const fileName = path.basename(filePath, '.md');
        const markdown = fs.readFileSync(filePath, 'utf8');

        console.log(`üìÑ Processing: ${fileName}`);

        // ÁÆÄÂçïÁöÑÊ†áÈ¢ò
        const title = fileName.replace(/[-_]/g, ' ');

        // ËΩ¨Êç¢‰∏∫ Notion Âùó
        const blocks = markdownToBlocks(markdown).slice(0, 50); // ÈôêÂà∂ÂùóÊï∞Èáè

        // ÂÖàÊ£ÄÊü•Êï∞ÊçÆÂ∫ìÁªìÊûÑ
        const database = await notion.databases.retrieve({ 
            database_id: databaseId 
        });
        
        console.log(`üîç Database retrieved:`, JSON.stringify(database, null, 2).substring(0, 500));
        
        // Ê£ÄÊü• properties ÊòØÂê¶Â≠òÂú®
        if (!database || !database.properties) {
            throw new Error(`Database properties not found. Database object: ${JSON.stringify(database)}`);
        }
        
        // ÊâæÂà∞Ê†áÈ¢òÂ±ûÊÄß
        const titleProperty = Object.entries(database.properties)
            .find(([key, prop]) => prop.type === 'title');
        
        if (!titleProperty) {
            console.log('Available properties:', Object.keys(database.properties));
            throw new Error('No title property found in database');
        }
        
        const titlePropertyName = titleProperty[0];
        console.log(`üìù Using title property: ${titlePropertyName}`);
        
        // ÂàõÂª∫È°µÈù¢Â±ûÊÄß
        const properties = {};
        properties[titlePropertyName] = {
            title: [
                {
                    text: { content: title },
                },
            ],
        };

        // Áõ¥Êé•ÂàõÂª∫È°µÈù¢Ôºå‰∏çÊü•ËØ¢Áé∞ÊúâÈ°µÈù¢
        const newPage = await notion.pages.create({
            parent: { database_id: databaseId },
            properties: properties,
            children: blocks,
        });

        console.log(`‚úÖ Created: ${title}`);

        // ÈÅøÂÖç API ÈôêÂà∂
        await new Promise((resolve) => setTimeout(resolve, 1000));
    } catch (error) {
        console.error(`‚ùå Error processing ${filePath}:`, error.message);
    }
}

console.log('‚úÖ Notion sync test completed!');
